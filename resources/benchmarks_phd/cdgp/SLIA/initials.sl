(set-logic SLIA)(synth-fun f ((name String)) String    ((Start String (ntString))     (ntString String (name " " "."                       (str.++ ntString ntString)                       (str.replace ntString ntString ntString)                       (str.at ntString ntInt)                       (int.to.str ntInt)                       (str.substr ntString ntInt ntInt)))      (ntInt Int (0 1 2                  (+ ntInt ntInt)                  (- ntInt ntInt)                  (str.len ntString)                  (str.to.int ntString)                  (str.indexof ntString ntString ntInt)))      (ntBool Bool (true false                    (str.prefixof ntString ntString)                    (str.suffixof ntString ntString)                    (str.contains ntString ntString)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(define-fun ithSplit ((s String) (delimiter String) (i Int)) String    (let ((firstSpacePos Int (str.indexof s delimiter 0)))    (let ((SecondSpacePos Int (str.indexof s delimiter (+ firstSpacePos 1))))    (let ((ThirdSpacePos Int (str.indexof s delimiter (+ SecondSpacePos 1))))            (ite (= i 0)                (ite (= firstSpacePos (- 1))                     s ; Return the whole string, there was no space                     (str.substr s 0 firstSpacePos)                )                (ite (= i 1)                    (ite (= firstSpacePos (- 1))                        "" ; There was no space, so index 1 is out of bounds                        (ite (= SecondSpacePos (- 1))                            (str.substr s (+ firstSpacePos 1) (str.len s)) ; till the end of the String                            (str.substr s (+ firstSpacePos 1) (- (- SecondSpacePos 1) firstSpacePos)) ; to the next space; second arg of str.substr is shift, not position                        )                    )                    (ite (= i 2)                        (ite (or (= firstSpacePos (- 1)) (= SecondSpacePos (- 1)))                            "" ; There was no space, so index 2 is out of bounds                            (ite (= ThirdSpacePos (- 1))                                (str.substr s (+ SecondSpacePos 1) (str.len s)) ; till the end of the String                                (str.substr s (+ SecondSpacePos 1) (- (- ThirdSpacePos 1) SecondSpacePos)) ; to the next space; second arg of str.substr is shift, not position                            )                        )                        "" ; Unhandled values of i (> 2)                    )                )            )    ))))(define-fun precond ((s String)) Bool    (and (distinct (str.indexof s " " 0) (- 1))  ; there must be at least one space         (= (str.indexof s " " (+ (str.indexof s " " 0) 1)) (- 1))  ; only one space         (>= (str.len s) 3)                      ; at least 3 chars         (distinct (str.at s 0) " ")             ; first char must be non-space         (distinct (str.at s (- (str.len s) 1)) " ")  ; last char must be non-space    ));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (constraint (= (f "Nancy FreeHafer") "N.F.")); (constraint (= (f "Andrew Cencici") "A.C.")); (constraint (= (f "Jan Kotas") "J.K.")); (constraint (= (f "Mariya Sergienko") "M.S.")); Example solution: (str.++ (str.++ (str.at name 0) ".")   (str.++ (str.at (str.substr name (+ 1 (str.indexof name " " 0)) (str.len  name)) 0) ".") )(declare-var s String)(constraint (=> (precond s) (= (f s) (str.++ (str.at (ithSplit s " " 0) 0) "." (str.at (ithSplit s " " 1) 0) "." ) ))) (check-synth)